'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JAVASCRIPT = require('./types/javascript');

var _require = require('./util'),
    symbol = _require.symbol;

var IS_TYPES = symbol('skema:types');

module.exports = (_temp = _class = function () {
  function Type() {
    var types = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Type);

    if (types[IS_TYPES]) {
      return types;
    }

    this[IS_TYPES] = true;

    this._types = Object.assign(Object.create(null), JAVASCRIPT, types);
  }

  _createClass(Type, [{
    key: 'get',
    value: function get(type) {
      if (!type) {
        return;
      }

      return Type.get(type, this._types);
    }
  }, {
    key: 'register',
    value: function register(type, property) {
      this._types[type] = property;
    }

    // @param {String} type
    // @param {Object} types

  }]);

  return Type;
}(), _class.get = function (type, types) {
  if (typeof type === 'string') {
    type = type.toLowerCase();
    var rule = types && types[type];

    // type.get('string')
    if (rule) {
      return rule;
    }
  }

  var key = void 0;
  var def = void 0;

  // type.get(String)
  for (key in types) {
    def = types[key];

    if (type === def.type) {
      return def;
    }
  }

  // type not found
  return;
}, _temp);
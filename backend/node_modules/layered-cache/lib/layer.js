'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _errObject = require('err-object');

var _errObject2 = _interopRequireDefault(_errObject);

var _singleBatch = require('single-batch');

var _singleBatch2 = _interopRequireDefault(_singleBatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The cache wrapper
// - queuing
// - feature support

const filterThenSingle = (key, filter, single, spread) => {
  return (spread ? filter(...key) : filter(key)).then(available => {
    if (!available) {
      return;
    }

    return spread ? single(...key) : single(key);
  });
};

const filterThenBatch = (keys, filter, batch) => {
  return filter(...keys).then(availables => {
    const filteredKeys = keys.filter((key, i) => {
      if (availables[i]) {
        return true;
      }
    });

    return batch(...filteredKeys).then(values => {
      let i = 0;
      return availables.map(available => {
        if (!available) {
          return undefined;
        }

        return values[i++];
      });
    });
  });
};

class Layer {
  constructor(cache) {

    if (cache instanceof Layer) {
      return cache;
    }

    this._supported = {};

    this._cache = cache;
    this._get = (0, _singleBatch2.default)('get', 'mget', cache, true);

    if (!this._get) {
      throw (0, _errObject2.default)({
        message: 'either get or mget should be implemented.',
        name: 'NoGetError',
        code: 'ERR_NO_GET'
      });
    }

    this._has = (0, _singleBatch2.default)('has', 'mhas', cache, true);
    this._validate = (0, _singleBatch2.default)('validate', 'mvalidate', cache);
    this._set = (0, _singleBatch2.default)('set', 'mset', cache);
  }

  get(key) {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return _this._has ? filterThenSingle(key, _this._has.single, _this._get.single) : _this._get.single(key);
    })();
  }

  mget(...keys) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return _this2._has ? filterThenBatch(keys, _this2._has.batch, _this2._get.batch) : _this2._get.batch(...keys);
    })();
  }

  set(key, value) {
    var _this3 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (!_this3._set) {
        return;
      }

      return _this3._validate ? filterThenSingle([key, value], _this3._validate.single, _this3._set.single, true) : _this3._set.single(key, value);
    })();
  }

  mset(...pairs) {
    var _this4 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      if (!_this4._set) {
        return;
      }

      return _this4._validate ? filterThenBatch(pairs, _this4._validate.batch, _this4._set.batch) : _this4._set.batch(...pairs);
    })();
  }
}
exports.default = Layer;